{"ast":null,"code":"var _jsxFileName = \"/home/raj/Documents/project/src/components/Auth/ForgotPassword.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport { Container, Box, TextField, Button, Typography, CssBaseline, Alert } from '@mui/material';\nimport { sendPasswordReset } from '../../api/userApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ForgotPassword = () => {\n  _s();\n  const [successMessage, setSuccessMessage] = useState(null); // Start as `null`\n  const [errorMessage, setErrorMessage] = useState(null); // Start as `null`\n\n  const handleSubmit = async (values, {\n    setSubmitting\n  }) => {\n    try {\n      await sendPasswordReset(values.email); // Simulate API call\n      setSuccessMessage('Password reset instructions have been sent to your email.');\n      setErrorMessage(null); // Clear any previous errors\n    } catch (error) {\n      setErrorMessage('Failed to send password reset instructions.');\n      setSuccessMessage(null); // Clear any previous success messages\n    } finally {\n      setSubmitting(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    component: \"main\",\n    maxWidth: \"xs\",\n    children: [/*#__PURE__*/_jsxDEV(CssBaseline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        marginTop: 8,\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"h1\",\n        variant: \"h5\",\n        children: \"Forgot Password\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: {\n          email: ''\n        },\n        validationSchema: Yup.object({\n          email: Yup.string().email('Invalid email address').required('Email is required')\n        }),\n        onSubmit: handleSubmit,\n        children: ({\n          isSubmitting\n        }) => /*#__PURE__*/_jsxDEV(Form, {\n          children: [successMessage && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"success\",\n            sx: {\n              width: '100%',\n              mb: 2\n            },\n            children: successMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 17\n          }, this), errorMessage && /*#__PURE__*/_jsxDEV(Alert, {\n            severity: \"error\",\n            sx: {\n              width: '100%',\n              mb: 2\n            },\n            children: errorMessage\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: TextField,\n            name: \"email\",\n            label: \"Email Address\",\n            fullWidth: true,\n            margin: \"normal\",\n            autoComplete: \"email\",\n            error: !!ErrorMessage.name,\n            helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"email\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 79,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            fullWidth: true,\n            variant: \"contained\",\n            color: \"primary\",\n            disabled: isSubmitting,\n            sx: {\n              mt: 3,\n              mb: 2\n            },\n            children: \"Send Reset Instructions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n};\n_s(ForgotPassword, \"N4cHOsO9D8TFqyrOfyz0w4Epq0M=\");\n_c = ForgotPassword;\nexport default ForgotPassword;\nvar _c;\n$RefreshReg$(_c, \"ForgotPassword\");","map":{"version":3,"names":["React","useState","Formik","Form","Field","ErrorMessage","Yup","Container","Box","TextField","Button","Typography","CssBaseline","Alert","sendPasswordReset","jsxDEV","_jsxDEV","ForgotPassword","_s","successMessage","setSuccessMessage","errorMessage","setErrorMessage","handleSubmit","values","setSubmitting","email","error","component","maxWidth","children","fileName","_jsxFileName","lineNumber","columnNumber","sx","marginTop","display","flexDirection","alignItems","variant","initialValues","validationSchema","object","string","required","onSubmit","isSubmitting","severity","width","mb","as","name","label","fullWidth","margin","autoComplete","helperText","type","color","disabled","mt","_c","$RefreshReg$"],"sources":["/home/raj/Documents/project/src/components/Auth/ForgotPassword.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {\n  Container,\n  Box,\n  TextField,\n  Button,\n  Typography,\n  CssBaseline,\n  Alert,\n} from '@mui/material';\nimport { sendPasswordReset } from '../../api/userApi';\n\nconst ForgotPassword = () => {\n  const [successMessage, setSuccessMessage] = useState(null); // Start as `null`\n  const [errorMessage, setErrorMessage] = useState(null); // Start as `null`\n\n  const handleSubmit = async (values, { setSubmitting }) => {\n    try {\n      await sendPasswordReset(values.email); // Simulate API call\n      setSuccessMessage('Password reset instructions have been sent to your email.');\n      setErrorMessage(null); // Clear any previous errors\n    } catch (error) {\n      setErrorMessage('Failed to send password reset instructions.');\n      setSuccessMessage(null); // Clear any previous success messages\n    } finally {\n      setSubmitting(false);\n    }\n  };\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: 8,\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Typography component=\"h1\" variant=\"h5\">\n          Forgot Password\n        </Typography>\n        <Formik\n          initialValues={{ email: '' }}\n          validationSchema={Yup.object({\n            email: Yup.string()\n              .email('Invalid email address')\n              .required('Email is required'),\n          })}\n          onSubmit={handleSubmit}\n        >\n          {({ isSubmitting }) => (\n            <Form>\n              {/* Only display the success message if one exists */}\n              {successMessage && (\n                <Alert severity=\"success\" sx={{ width: '100%', mb: 2 }}>\n                  {successMessage}\n                </Alert>\n              )}\n\n              {/* Only display the error message if one exists */}\n              {errorMessage && (\n                <Alert severity=\"error\" sx={{ width: '100%', mb: 2 }}>\n                  {errorMessage}\n                </Alert>\n              )}\n\n              <Field\n                as={TextField}\n                name=\"email\"\n                label=\"Email Address\"\n                fullWidth\n                margin=\"normal\"\n                autoComplete=\"email\"\n                error={!!ErrorMessage.name}\n                helperText={<ErrorMessage name=\"email\" />}\n              />\n              <Button\n                type=\"submit\"\n                fullWidth\n                variant=\"contained\"\n                color=\"primary\"\n                disabled={isSubmitting}\n                sx={{ mt: 3, mb: 2 }}\n              >\n                Send Reset Instructions\n              </Button>\n            </Form>\n          )}\n        </Formik>\n      </Box>\n    </Container>\n  );\n};\n\nexport default ForgotPassword;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}