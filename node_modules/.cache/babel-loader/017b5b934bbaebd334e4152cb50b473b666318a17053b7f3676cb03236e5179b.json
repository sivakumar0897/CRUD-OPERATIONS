{"ast":null,"code":"import { getUsers, createUser, updateUser, deleteUser } from '../../api/userApi';\nexport const fetchUsersRequest = () => ({\n  type: 'FETCH_USERS_REQUEST'\n});\nexport const fetchUsersSuccess = payload => ({\n  type: 'FETCH_USERS_SUCCESS',\n  payload\n});\nexport const fetchUsersFailure = error => ({\n  type: 'FETCH_USERS_FAILURE',\n  payload: error\n});\nexport const fetchUsers = (page = 1) => async dispatch => {\n  dispatch(fetchUsersRequest());\n  try {\n    const response = await getUsers(page);\n    dispatch(fetchUsersSuccess({\n      data: response.data.map(user => ({\n        id: user.id,\n        first_name: user.name.split(' ')[0],\n        last_name: user.name.split(' ')[1] || '',\n        email: user.email,\n        avatar: `https://i.pravatar.cc/150?img=${user.id}` // Simulated avatar\n      })),\n      totalPages: Math.ceil(response.headers['x-total-count'] / 10),\n      // Total pages for pagination\n      page\n    }));\n  } catch (error) {\n    dispatch(fetchUsersFailure(error.message));\n  }\n};\nexport const addUser = userData => async dispatch => {\n  try {\n    const response = await createUser(userData);\n    dispatch(fetchUsers()); // Refetch users after adding\n  } catch (error) {\n    console.error('Create User Error:', error.message);\n  }\n};\nexport const editUser = (id, userData) => async dispatch => {\n  try {\n    const response = await updateUser(id, userData);\n    dispatch(fetchUsers()); // Refetch users after updating\n  } catch (error) {\n    console.error('Update User Error:', error.message);\n  }\n};\nexport const removeUser = id => async dispatch => {\n  try {\n    await deleteUser(id);\n    dispatch(fetchUsers()); // Refetch users after deleting\n  } catch (error) {\n    console.error('Delete User Error:', error.message);\n  }\n};","map":{"version":3,"names":["getUsers","createUser","updateUser","deleteUser","fetchUsersRequest","type","fetchUsersSuccess","payload","fetchUsersFailure","error","fetchUsers","page","dispatch","response","data","map","user","id","first_name","name","split","last_name","email","avatar","totalPages","Math","ceil","headers","message","addUser","userData","console","editUser","removeUser"],"sources":["/home/raj/Documents/project/src/redux/actions/userActions.js"],"sourcesContent":["import { getUsers, createUser, updateUser, deleteUser } from '../../api/userApi';\n\nexport const fetchUsersRequest = () => ({ type: 'FETCH_USERS_REQUEST' });\nexport const fetchUsersSuccess = (payload) => ({ type: 'FETCH_USERS_SUCCESS', payload });\nexport const fetchUsersFailure = (error) => ({ type: 'FETCH_USERS_FAILURE', payload: error });\n\nexport const fetchUsers = (page = 1) => async (dispatch) => {\n  dispatch(fetchUsersRequest());\n  try {\n    const response = await getUsers(page);\n    dispatch(\n      fetchUsersSuccess({\n        data: response.data.map((user) => ({\n          id: user.id,\n          first_name: user.name.split(' ')[0],\n          last_name: user.name.split(' ')[1] || '',\n          email: user.email,\n          avatar: `https://i.pravatar.cc/150?img=${user.id}`, // Simulated avatar\n        })),\n        totalPages: Math.ceil(response.headers['x-total-count'] / 10), // Total pages for pagination\n        page,\n      })\n    );\n  } catch (error) {\n    dispatch(fetchUsersFailure(error.message));\n  }\n};\n\nexport const addUser = (userData) => async (dispatch) => {\n  try {\n    const response = await createUser(userData);\n    dispatch(fetchUsers()); // Refetch users after adding\n  } catch (error) {\n    console.error('Create User Error:', error.message);\n  }\n};\n\nexport const editUser = (id, userData) => async (dispatch) => {\n  try {\n    const response = await updateUser(id, userData);\n    dispatch(fetchUsers()); // Refetch users after updating\n  } catch (error) {\n    console.error('Update User Error:', error.message);\n  }\n};\n\nexport const removeUser = (id) => async (dispatch) => {\n  try {\n    await deleteUser(id);\n    dispatch(fetchUsers()); // Refetch users after deleting\n  } catch (error) {\n    console.error('Delete User Error:', error.message);\n  }\n};\n"],"mappings":"AAAA,SAASA,QAAQ,EAAEC,UAAU,EAAEC,UAAU,EAAEC,UAAU,QAAQ,mBAAmB;AAEhF,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,MAAO;EAAEC,IAAI,EAAE;AAAsB,CAAC,CAAC;AACxE,OAAO,MAAMC,iBAAiB,GAAIC,OAAO,KAAM;EAAEF,IAAI,EAAE,qBAAqB;EAAEE;AAAQ,CAAC,CAAC;AACxF,OAAO,MAAMC,iBAAiB,GAAIC,KAAK,KAAM;EAAEJ,IAAI,EAAE,qBAAqB;EAAEE,OAAO,EAAEE;AAAM,CAAC,CAAC;AAE7F,OAAO,MAAMC,UAAU,GAAGA,CAACC,IAAI,GAAG,CAAC,KAAK,MAAOC,QAAQ,IAAK;EAC1DA,QAAQ,CAACR,iBAAiB,CAAC,CAAC,CAAC;EAC7B,IAAI;IACF,MAAMS,QAAQ,GAAG,MAAMb,QAAQ,CAACW,IAAI,CAAC;IACrCC,QAAQ,CACNN,iBAAiB,CAAC;MAChBQ,IAAI,EAAED,QAAQ,CAACC,IAAI,CAACC,GAAG,CAAEC,IAAI,KAAM;QACjCC,EAAE,EAAED,IAAI,CAACC,EAAE;QACXC,UAAU,EAAEF,IAAI,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACnCC,SAAS,EAAEL,IAAI,CAACG,IAAI,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE;QACxCE,KAAK,EAAEN,IAAI,CAACM,KAAK;QACjBC,MAAM,EAAE,iCAAiCP,IAAI,CAACC,EAAE,EAAE,CAAE;MACtD,CAAC,CAAC,CAAC;MACHO,UAAU,EAAEC,IAAI,CAACC,IAAI,CAACb,QAAQ,CAACc,OAAO,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;MAAE;MAC/DhB;IACF,CAAC,CACH,CAAC;EACH,CAAC,CAAC,OAAOF,KAAK,EAAE;IACdG,QAAQ,CAACJ,iBAAiB,CAACC,KAAK,CAACmB,OAAO,CAAC,CAAC;EAC5C;AACF,CAAC;AAED,OAAO,MAAMC,OAAO,GAAIC,QAAQ,IAAK,MAAOlB,QAAQ,IAAK;EACvD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMZ,UAAU,CAAC6B,QAAQ,CAAC;IAC3ClB,QAAQ,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdsB,OAAO,CAACtB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACmB,OAAO,CAAC;EACpD;AACF,CAAC;AAED,OAAO,MAAMI,QAAQ,GAAGA,CAACf,EAAE,EAAEa,QAAQ,KAAK,MAAOlB,QAAQ,IAAK;EAC5D,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMX,UAAU,CAACe,EAAE,EAAEa,QAAQ,CAAC;IAC/ClB,QAAQ,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdsB,OAAO,CAACtB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACmB,OAAO,CAAC;EACpD;AACF,CAAC;AAED,OAAO,MAAMK,UAAU,GAAIhB,EAAE,IAAK,MAAOL,QAAQ,IAAK;EACpD,IAAI;IACF,MAAMT,UAAU,CAACc,EAAE,CAAC;IACpBL,QAAQ,CAACF,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;EAC1B,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdsB,OAAO,CAACtB,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAACmB,OAAO,CAAC;EACpD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}